/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.topl.finalProj;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JFileChooser;
/**
 *
 * @author PC
 */
public class FinalProject extends javax.swing.JFrame {

    private final JFileChooser openFileChooser;
    private BufferedReader originalBI;
    private String fileContent; //ginawa kong class variable si fileContent para macall siya sa ibang method
    
    /**
     * Creates new form FinalProject
     */
    public FinalProject() {
        initComponents();
        
        openFileChooser = new JFileChooser();
        openFileChooser.setCurrentDirectory(new File("D:\\My Files\\Documents\\COLLEGE\\TOPL\\sample"));
        
        LexicalButton.setEnabled(false);
        SyntaxButton.setEnabled(false);
        SemanticButton.setEnabled(false);
        ClearButton.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ResultTextField = new javax.swing.JTextField();
        OpenFileButton = new javax.swing.JButton();
        LexicalButton = new javax.swing.JButton();
        SyntaxButton = new javax.swing.JButton();
        SemanticButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CodeTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compiler");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ResultTextField.setBackground(new java.awt.Color(248, 211, 255));
        ResultTextField.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        ResultTextField.setText("Result:");
        getContentPane().add(ResultTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 638, 735, 34));

        OpenFileButton.setBackground(new java.awt.Color(248, 211, 255));
        OpenFileButton.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        OpenFileButton.setText("Open File");
        OpenFileButton.setBorder(null);
        OpenFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileButtonActionPerformed(evt);
            }
        });
        getContentPane().add(OpenFileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1015, 85, 235, 37));

        LexicalButton.setBackground(new java.awt.Color(248, 211, 255));
        LexicalButton.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        LexicalButton.setText("Lexical Analysis");
        LexicalButton.setToolTipText("");
        LexicalButton.setBorder(null);
        LexicalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LexicalButtonActionPerformed(evt);
            }
        });
        getContentPane().add(LexicalButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1015, 193, 235, 37));

        SyntaxButton.setBackground(new java.awt.Color(248, 211, 255));
        SyntaxButton.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        SyntaxButton.setText("Syntax Analysis");
        SyntaxButton.setBorder(null);
        SyntaxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SyntaxButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SyntaxButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1015, 302, 235, 37));

        SemanticButton.setBackground(new java.awt.Color(248, 211, 255));
        SemanticButton.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        SemanticButton.setText("Semantic Analysis");
        SemanticButton.setBorder(null);
        SemanticButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SemanticButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SemanticButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1015, 413, 235, 36));

        ClearButton.setBackground(new java.awt.Color(248, 211, 255));
        ClearButton.setFont(new java.awt.Font("Anaphora Trial", 0, 14)); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.setBorder(null);
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1015, 521, 235, 37));

        CodeTextArea.setBackground(new java.awt.Color(248, 211, 255));
        CodeTextArea.setColumns(20);
        CodeTextArea.setFont(new java.awt.Font("Milky Coffee", 0, 18)); // NOI18N
        CodeTextArea.setRows(5);
        CodeTextArea.setBorder(null);
        CodeTextArea.setSelectionColor(new java.awt.Color(248, 211, 255));
        jScrollPane1.setViewportView(CodeTextArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 90, 930, 480));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\PC\\OneDrive\\Documents\\NetBeansProjects\\topl\\src\\main\\java\\com\\mycompany\\topl\\finalProj\\Purple Clouds Gamer Girl Twitch Overlay (1) (1).png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        setSize(new java.awt.Dimension(1294, 757));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileButtonActionPerformed
        int returnValue = openFileChooser.showOpenDialog(this);
      LexicalButton.setEnabled(true);
      
      try{
        originalBI = new BufferedReader(new FileReader(openFileChooser.getSelectedFile()));
        Scanner input = new Scanner(originalBI);
        StringBuilder sb = new StringBuilder(); //ito si sb cinoconcat niya lang yung mga string para maging isang string
      
        while (input.hasNext()) {
            String row = input.nextLine();
            sb.append(row).append("\n"); //inaadd niya lang yung each line sa isang string
        }
        
        fileContent = sb.toString(); //yung laman ni sb isang buong string then pinasa niya kay fileContent
        CodeTextArea.setText(fileContent); //magshshow na dun sa code box area natin
        
        OpenFileButton.setEnabled(false);
      }catch(Exception e){
              System.out.println("" + e);
          }
    }//GEN-LAST:event_OpenFileButtonActionPerformed

    private void LexicalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LexicalButtonActionPerformed
        try 
        {   //yung laman ng fileContent which is yung text file natin iniisplit per line para maread yung each line then isstore niya sa String[]array
            String[] lines = fileContent.split("\\n");
            
            boolean lexicalPassed = true; //boolean para ez 
            
            for (String line : lines) 
            {
                String input = line.trim();
                
                String tokens[] = input.split("\\s+|(?<=;)|(?=;)");

                for (int i = 0; i < tokens.length; i++)
                {
                    String token = tokens[i];

                    if (token.equals("int") || token.equals("double") || token.equals("char") || token.equals("String"))
                    {
                        System.out.print("<data_type> ");
                    }
                    else if (token.equals("="))
                    {
                        System.out.print("<assignment_operator> ");
                    }
                    else if (token.matches("[a-zA-Z_][a-zA-Z0-9_]*"))
                    {
                        System.out.print("<identifier> ");
                    }
                    else if (token.matches("\\d+(\\.\\d+)?") || token.matches("'.{1}'"))
                    {
                        System.out.print("<value> ");
                    }
                    else if (token.startsWith("\""))
                    {
                        StringBuilder valueBuilder = new StringBuilder(token.substring(1));

                        while (i + 1 < tokens.length && !tokens[i + 1].endsWith("\"")) {
                            i++;
                            valueBuilder.append(" ").append(tokens[i]);
                        }

                        if (i + 1 < tokens.length) {
                            valueBuilder.append(" ").append(tokens[i + 1], 0, tokens[i + 1].length() - 1);
                            i++;
                        }

                        System.out.print("<value> ");
                    } 
                    else if (token.equals(";"))
                    {
                        System.out.print("<delimiter> \n");
                    }
                    else
                    {
                        lexicalPassed = false;
                        break;
                    }
                }
                
                if (lexicalPassed)
                { //kapag naread na lahat ng lines tapos hindi nag false yung syntaxPassed natin ipiprint niya na sa result field as syntax analysis passed
                    ResultTextField.setText("Result: Lexical Analysis Passed!");
                    SyntaxButton.setEnabled(true);
                    LexicalButton.setEnabled(false);
                } 
                else 
                { 
                    ResultTextField.setText("Result: Lexical Analysis Failed!");
                    ClearButton.setEnabled(true);
                    LexicalButton.setEnabled(false);
                }             
            }
            
        }catch (Exception e)
        { 
            ResultTextField.setText("Result: Lexical Analysis Failed!");
            ClearButton.setEnabled(true);
            LexicalButton.setEnabled(false);
        }
    }//GEN-LAST:event_LexicalButtonActionPerformed

    private void SyntaxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SyntaxButtonActionPerformed
        try 
        {   //yung laman ng fileContent which is yung text file natin iniisplit per line para maread yung each line then isstore niya sa String[]array
            String[] lines = fileContent.split("\\n");
            
            boolean syntaxPassed = true; //boolean para ez 
            
            for (String line : lines) 
            {
                String input = line.trim();

                String split[] = input.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)|(?<=;)\\s+|(?=[;])");
                
                int i;
                
                if(split.length == 3)
                {
                    for (i = 0; i < split.length; i++)
                    {
                        if (split[i].equals("int") || split[i].equals("double") || split[i].equals("char") || split[i].equals("boolean") || split[i].equals("String"))
                        {
                        }
                        else if (split[i].matches("^[^0-9]*$"))
                        {
                            if (split[i].equals(";"))
                            {
                            }
                        }
                        else
                        {
                            syntaxPassed = false;
                            break;
                        }
                    }
                }
                else
                {    
                    for(i = 0; i < split.length; i++)
                    {
                        if (split[0].equals("int") || split[0].equals("double") || split[0].equals("char") || split[0].equals("boolean") || split[0].equals("String"))
                        {
                            if (split[i].matches("^[^0-9]*$"))
                            {
                                if (split[i].equals("="))
                                {
                                    String value = split[3];

                                    if (split[0].equals("int") && value.matches("-?\\d+"))
                                    {
                                    }
                                    else if (split[0].equals("double") && value.matches("-?\\d+(\\.\\d+)?"))
                                    {
                                    }
                                    else if (split[0].equals("char") && value.matches("'.'"))
                                    {
                                    }
                                    else if (split[0].equals("boolean") && (value.equals("true") || value.equals("false")))
                                    {
                                    }
                                    else if (split[0].equals("String"))
                                    {
                                        if (!split[3].startsWith("\"") || !split[3].endsWith("\"")) 
                                            {
                                                syntaxPassed = false;
                                                break;
                                            }
                                    }
                                    else 
                                    {
                                        syntaxPassed = false;
                                        break;
                                    }        
                                    
                                    if(split[4].equals(";"))
                                    {
                                    }
                                }
                            }
                        } 
                        else 
                        {
                            syntaxPassed = false;
                            break;
                        }
                    }
                }
            }

            if (syntaxPassed) 
            { 
                ResultTextField.setText("Result: Syntax Analysis Passed!");
                SemanticButton.setEnabled(true);
                SyntaxButton.setEnabled(false);
            } 
            else
            { 
                ResultTextField.setText("Result: Syntax Analysis Failed!");
                ClearButton.setEnabled(true);
                SyntaxButton.setEnabled(false);
            }
        
        }catch (Exception e) 
        { 
            ResultTextField.setText("Result: Syntax Analysis Failed!");
            ClearButton.setEnabled(true);
            SyntaxButton.setEnabled(false);
        }
    }//GEN-LAST:event_SyntaxButtonActionPerformed

    private void SemanticButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SemanticButtonActionPerformed
        try
        {
            String[] lines = fileContent.split("\\n");
            boolean semanticPassed = true;
            
            for (String line : lines) 
            {
                String input = line.trim();
                
                String[] split = input.split("\\s+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)|(?<=;)\\s+|(?=[;])");

                String dataType = split[0];
                
                if(split.length == 3)
                {
                    for (int i = 0; i < split.length; i++)
                    {
                        if (split[i].equals("int") || split[i].equals("double") || split[i].equals("char") || split[i].equals("boolean") || split[i].equals("String"))
                        {
                        }
                        else if (split[i].matches("^[^0-9]*$"))
                        {
                            if (split[i].equals(";"))
                            {
                            }
                        }
                        else
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                }
                else
                {
                    if (dataType.equals("int"))
                    {
                        if (!split[3].matches("\\d+")) 
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                    else if (dataType.equals("String"))
                    {
                        if (!split[3].startsWith("\"") || !split[3].endsWith("\"")) 
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                    else if (dataType.equals("double")) 
                    {
                        if (!split[3].matches("-?\\d+(\\.\\d+)?"))
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                    else if (dataType.equals("boolean"))
                    {
                        if (!split[3].matches("true") || split[3].matches("false"))
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                    else if(dataType.equals("char"))
                    {
                        if(!split[3].matches("'.'"))
                        {
                            semanticPassed = false;
                            break;
                        }
                    }
                    else
                    {
                        semanticPassed = false;
                        break;
                    }
                }    
            }
            
            if (semanticPassed)
            { //kapag naread na lahat ng lines tapos hindi nag false yung syntaxPassed natin ipiprint niya na sa result field as syntax analysis passed
                    ResultTextField.setText("Result: Semantic Analysis Passed!");
                    SemanticButton.setEnabled(false);
                    ClearButton.setEnabled(true);
            } 
            else 
            { //then ito kapag nagfalse si syntaxPassed natin ipiprint niya sa result field as syntax analysis failed
                ResultTextField.setText("Result: Semantic Analysis Failed!");
                ClearButton.setEnabled(true);
                SemanticButton.setEnabled(false);
            }
            
        }catch (Exception e)
        { // dito naman try and catch lang if  may kung ano mang error iffailed nalang niya
            ResultTextField.setText("Result: Semantic Analysis Failed!");
            ClearButton.setEnabled(true);
            SemanticButton.setEnabled(false);
        }
    }//GEN-LAST:event_SemanticButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        
        CodeTextArea.setText("");
        ResultTextField.setText("Result: ");
        ClearButton.setEnabled(false);
        OpenFileButton.setEnabled(true);
        
    }//GEN-LAST:event_ClearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalProject().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextArea CodeTextArea;
    private javax.swing.JButton LexicalButton;
    private javax.swing.JButton OpenFileButton;
    private javax.swing.JTextField ResultTextField;
    private javax.swing.JButton SemanticButton;
    private javax.swing.JButton SyntaxButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
